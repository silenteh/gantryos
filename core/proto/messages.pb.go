// Code generated by protoc-gen-gogo.
// source: messages.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/gogo/protobuf/proto"
import math "math"

// discarding unused import gogoproto "github.com/gogo/protobuf/gogoproto/gogo.pb"

import io1 "io"
import math3 "math"
import fmt4 "fmt"
import github_com_gogo_protobuf_proto2 "github.com/gogo/protobuf/proto"

import fmt5 "fmt"
import strings2 "strings"
import reflect2 "reflect"

import math4 "math"

import fmt6 "fmt"
import strings3 "strings"
import github_com_gogo_protobuf_proto3 "github.com/gogo/protobuf/proto"
import sort1 "sort"
import strconv1 "strconv"
import reflect3 "reflect"

import fmt7 "fmt"
import bytes1 "bytes"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = math.Inf

type StatusUpdateRecord_Type int32

const (
	StatusUpdateRecord_UPDATE StatusUpdateRecord_Type = 0
	StatusUpdateRecord_ACK    StatusUpdateRecord_Type = 1
)

var StatusUpdateRecord_Type_name = map[int32]string{
	0: "UPDATE",
	1: "ACK",
}
var StatusUpdateRecord_Type_value = map[string]int32{
	"UPDATE": 0,
	"ACK":    1,
}

func (x StatusUpdateRecord_Type) Enum() *StatusUpdateRecord_Type {
	p := new(StatusUpdateRecord_Type)
	*p = x
	return p
}
func (x StatusUpdateRecord_Type) String() string {
	return proto1.EnumName(StatusUpdateRecord_Type_name, int32(x))
}
func (x *StatusUpdateRecord_Type) UnmarshalJSON(data []byte) error {
	value, err := proto1.UnmarshalJSONEnum(StatusUpdateRecord_Type_value, data, "StatusUpdateRecord_Type")
	if err != nil {
		return err
	}
	*x = StatusUpdateRecord_Type(value)
	return nil
}

// This message sends the status update of a task running on a specific slave
type SlaveTaskStatusUpdate struct {
	Slave            *SlaveInfo  `protobuf:"bytes,1,opt,name=slave" json:"slave,omitempty"`
	Status           *TaskStatus `protobuf:"bytes,2,req,name=status" json:"status,omitempty"`
	Timestamp        *float64    `protobuf:"fixed64,3,req,name=timestamp" json:"timestamp,omitempty"`
	Uuid             []byte      `protobuf:"bytes,4,req,name=uuid" json:"uuid,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *SlaveTaskStatusUpdate) Reset()      { *m = SlaveTaskStatusUpdate{} }
func (*SlaveTaskStatusUpdate) ProtoMessage() {}

func (m *SlaveTaskStatusUpdate) GetSlave() *SlaveInfo {
	if m != nil {
		return m.Slave
	}
	return nil
}

func (m *SlaveTaskStatusUpdate) GetStatus() *TaskStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SlaveTaskStatusUpdate) GetTimestamp() float64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *SlaveTaskStatusUpdate) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

// This message encapsulates how we checkpoint a status update to disk.
// NOTE: If type == UPDATE, the 'update' field is required.
// NOTE: If type == ACK, the 'uuid' field is required.
type StatusUpdateRecord struct {
	Type             *StatusUpdateRecord_Type `protobuf:"varint,1,req,name=type,enum=proto.StatusUpdateRecord_Type" json:"type,omitempty"`
	Update           *SlaveTaskStatusUpdate   `protobuf:"bytes,2,opt,name=update" json:"update,omitempty"`
	Uuid             []byte                   `protobuf:"bytes,3,opt,name=uuid" json:"uuid,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *StatusUpdateRecord) Reset()      { *m = StatusUpdateRecord{} }
func (*StatusUpdateRecord) ProtoMessage() {}

func (m *StatusUpdateRecord) GetType() StatusUpdateRecord_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return StatusUpdateRecord_UPDATE
}

func (m *StatusUpdateRecord) GetUpdate() *SlaveTaskStatusUpdate {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *StatusUpdateRecord) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

type ResourceRequestMessage struct {
	Requests         []*Request `protobuf:"bytes,1,rep,name=requests" json:"requests,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *ResourceRequestMessage) Reset()      { *m = ResourceRequestMessage{} }
func (*ResourceRequestMessage) ProtoMessage() {}

func (m *ResourceRequestMessage) GetRequests() []*Request {
	if m != nil {
		return m.Requests
	}
	return nil
}

type ResourceOffersMessage struct {
	Offers           []*ResourceOffer `protobuf:"bytes,1,rep,name=offers" json:"offers,omitempty"`
	Pids             []string         `protobuf:"bytes,2,rep,name=pids" json:"pids,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *ResourceOffersMessage) Reset()      { *m = ResourceOffersMessage{} }
func (*ResourceOffersMessage) ProtoMessage() {}

func (m *ResourceOffersMessage) GetOffers() []*ResourceOffer {
	if m != nil {
		return m.Offers
	}
	return nil
}

func (m *ResourceOffersMessage) GetPids() []string {
	if m != nil {
		return m.Pids
	}
	return nil
}

type LaunchTasksMessage struct {
	Tasks            []*TaskInfo `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty"`
	Filters          *Filters    `protobuf:"bytes,2,opt,name=filters" json:"filters,omitempty"`
	OfferIds         []string    `protobuf:"bytes,3,rep,name=offer_ids" json:"offer_ids,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *LaunchTasksMessage) Reset()      { *m = LaunchTasksMessage{} }
func (*LaunchTasksMessage) ProtoMessage() {}

func (m *LaunchTasksMessage) GetTasks() []*TaskInfo {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *LaunchTasksMessage) GetFilters() *Filters {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *LaunchTasksMessage) GetOfferIds() []string {
	if m != nil {
		return m.OfferIds
	}
	return nil
}

type RescindResourceOfferMessage struct {
	OfferId          *string `protobuf:"bytes,1,opt,name=offer_id" json:"offer_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RescindResourceOfferMessage) Reset()      { *m = RescindResourceOfferMessage{} }
func (*RescindResourceOfferMessage) ProtoMessage() {}

func (m *RescindResourceOfferMessage) GetOfferId() string {
	if m != nil && m.OfferId != nil {
		return *m.OfferId
	}
	return ""
}

type RunTaskMessage struct {
	Pid              *string   `protobuf:"bytes,1,opt,name=pid" json:"pid,omitempty"`
	Task             *TaskInfo `protobuf:"bytes,2,opt,name=task" json:"task,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *RunTaskMessage) Reset()      { *m = RunTaskMessage{} }
func (*RunTaskMessage) ProtoMessage() {}

func (m *RunTaskMessage) GetPid() string {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return ""
}

func (m *RunTaskMessage) GetTask() *TaskInfo {
	if m != nil {
		return m.Task
	}
	return nil
}

type KillTaskMessage struct {
	// TODO(bmahler): Include the SlaveID here to improve the Master's
	// ability to respond for non-activated slaves.
	Slave            *SlaveInfo `protobuf:"bytes,1,opt,name=slave" json:"slave,omitempty"`
	TaskId           *string    `protobuf:"bytes,2,opt,name=task_id" json:"task_id,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *KillTaskMessage) Reset()      { *m = KillTaskMessage{} }
func (*KillTaskMessage) ProtoMessage() {}

func (m *KillTaskMessage) GetSlave() *SlaveInfo {
	if m != nil {
		return m.Slave
	}
	return nil
}

func (m *KillTaskMessage) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

// NOTE: If 'pid' is present, scheduler driver sends an
// acknowledgement to the pid.
type StatusUpdateMessage struct {
	Update           *SlaveTaskStatusUpdate `protobuf:"bytes,1,opt,name=update" json:"update,omitempty"`
	Pid              *string                `protobuf:"bytes,2,opt,name=pid" json:"pid,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *StatusUpdateMessage) Reset()      { *m = StatusUpdateMessage{} }
func (*StatusUpdateMessage) ProtoMessage() {}

func (m *StatusUpdateMessage) GetUpdate() *SlaveTaskStatusUpdate {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *StatusUpdateMessage) GetPid() string {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return ""
}

type TaskStatusMessage struct {
	TaskStatus       *TaskStatus `protobuf:"bytes,1,opt,name=task_status" json:"task_status,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *TaskStatusMessage) Reset()      { *m = TaskStatusMessage{} }
func (*TaskStatusMessage) ProtoMessage() {}

func (m *TaskStatusMessage) GetTaskStatus() *TaskStatus {
	if m != nil {
		return m.TaskStatus
	}
	return nil
}

type StatusUpdateAcknowledgementMessage struct {
	Slave            *SlaveInfo `protobuf:"bytes,1,req,name=slave" json:"slave,omitempty"`
	TaskId           *string    `protobuf:"bytes,2,req,name=task_id" json:"task_id,omitempty"`
	Uuid             []byte     `protobuf:"bytes,3,req,name=uuid" json:"uuid,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *StatusUpdateAcknowledgementMessage) Reset()      { *m = StatusUpdateAcknowledgementMessage{} }
func (*StatusUpdateAcknowledgementMessage) ProtoMessage() {}

func (m *StatusUpdateAcknowledgementMessage) GetSlave() *SlaveInfo {
	if m != nil {
		return m.Slave
	}
	return nil
}

func (m *StatusUpdateAcknowledgementMessage) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

func (m *StatusUpdateAcknowledgementMessage) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

type LostSlaveMessage struct {
	SlaveId          *string `protobuf:"bytes,1,req,name=slave_id" json:"slave_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LostSlaveMessage) Reset()      { *m = LostSlaveMessage{} }
func (*LostSlaveMessage) ProtoMessage() {}

func (m *LostSlaveMessage) GetSlaveId() string {
	if m != nil && m.SlaveId != nil {
		return *m.SlaveId
	}
	return ""
}

// Allows the framework to query the status for non-terminal tasks.
// This causes the master to send back the latest task status for
// each task in 'statuses', if possible. Tasks that are no longer
// known will result in a TASK_LOST update. If statuses is empty,
// then the master will send the latest status for each task
// currently known.
type ReconcileTasksMessage struct {
	Statuses         []*TaskStatus `protobuf:"bytes,1,rep,name=statuses" json:"statuses,omitempty"`
	SlaveId          *string       `protobuf:"bytes,2,opt,name=slave_id" json:"slave_id,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *ReconcileTasksMessage) Reset()      { *m = ReconcileTasksMessage{} }
func (*ReconcileTasksMessage) ProtoMessage() {}

func (m *ReconcileTasksMessage) GetStatuses() []*TaskStatus {
	if m != nil {
		return m.Statuses
	}
	return nil
}

func (m *ReconcileTasksMessage) GetSlaveId() string {
	if m != nil && m.SlaveId != nil {
		return *m.SlaveId
	}
	return ""
}

type RegisterSlaveMessage struct {
	Slave            *SlaveInfo `protobuf:"bytes,1,opt,name=slave" json:"slave,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *RegisterSlaveMessage) Reset()      { *m = RegisterSlaveMessage{} }
func (*RegisterSlaveMessage) ProtoMessage() {}

func (m *RegisterSlaveMessage) GetSlave() *SlaveInfo {
	if m != nil {
		return m.Slave
	}
	return nil
}

type ReregisterSlaveMessage struct {
	Slave            *SlaveInfo  `protobuf:"bytes,1,opt,name=slave" json:"slave,omitempty"`
	Tasks            []*TaskInfo `protobuf:"bytes,2,rep,name=tasks" json:"tasks,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *ReregisterSlaveMessage) Reset()      { *m = ReregisterSlaveMessage{} }
func (*ReregisterSlaveMessage) ProtoMessage() {}

func (m *ReregisterSlaveMessage) GetSlave() *SlaveInfo {
	if m != nil {
		return m.Slave
	}
	return nil
}

func (m *ReregisterSlaveMessage) GetTasks() []*TaskInfo {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type SlaveRegisteredMessage struct {
	Slave            *SlaveInfo `protobuf:"bytes,1,req,name=slave" json:"slave,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *SlaveRegisteredMessage) Reset()      { *m = SlaveRegisteredMessage{} }
func (*SlaveRegisteredMessage) ProtoMessage() {}

func (m *SlaveRegisteredMessage) GetSlave() *SlaveInfo {
	if m != nil {
		return m.Slave
	}
	return nil
}

type SlaveReregisteredMessage struct {
	Slave            *SlaveInfo `protobuf:"bytes,1,req,name=slave" json:"slave,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *SlaveReregisteredMessage) Reset()      { *m = SlaveReregisteredMessage{} }
func (*SlaveReregisteredMessage) ProtoMessage() {}

func (m *SlaveReregisteredMessage) GetSlave() *SlaveInfo {
	if m != nil {
		return m.Slave
	}
	return nil
}

type UnregisterSlaveMessage struct {
	Slave            *SlaveInfo `protobuf:"bytes,1,req,name=slave" json:"slave,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *UnregisterSlaveMessage) Reset()      { *m = UnregisterSlaveMessage{} }
func (*UnregisterSlaveMessage) ProtoMessage() {}

func (m *UnregisterSlaveMessage) GetSlave() *SlaveInfo {
	if m != nil {
		return m.Slave
	}
	return nil
}

type HeartbeatMessage struct {
	Slave            *SlaveInfo `protobuf:"bytes,1,req,name=slave" json:"slave,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *HeartbeatMessage) Reset()      { *m = HeartbeatMessage{} }
func (*HeartbeatMessage) ProtoMessage() {}

func (m *HeartbeatMessage) GetSlave() *SlaveInfo {
	if m != nil {
		return m.Slave
	}
	return nil
}

func init() {
	proto1.RegisterEnum("proto.StatusUpdateRecord_Type", StatusUpdateRecord_Type_name, StatusUpdateRecord_Type_value)
}
func (m *SlaveTaskStatusUpdate) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io1.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field Slave", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			if m.Slave == nil {
				m.Slave = &SlaveInfo{}
			}
			if err := m.Slave.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 2:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &TaskStatus{}
			}
			if err := m.Status.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 3:
			if wireType != 1 {
				return fmt4.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var v uint64
			i := index + 8
			if i > l {
				return io1.ErrUnexpectedEOF
			}
			index = i
			v = uint64(data[i-8])
			v |= uint64(data[i-7]) << 8
			v |= uint64(data[i-6]) << 16
			v |= uint64(data[i-5]) << 24
			v |= uint64(data[i-4]) << 32
			v |= uint64(data[i-3]) << 40
			v |= uint64(data[i-2]) << 48
			v |= uint64(data[i-1]) << 56
			v2 := math3.Float64frombits(v)
			m.Timestamp = &v2
		case 4:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			m.Uuid = append([]byte{}, data[index:postIndex]...)
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto2.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io1.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *StatusUpdateRecord) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io1.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt4.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v StatusUpdateRecord_Type
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (StatusUpdateRecord_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
		case 2:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			if m.Update == nil {
				m.Update = &SlaveTaskStatusUpdate{}
			}
			if err := m.Update.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 3:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			m.Uuid = append([]byte{}, data[index:postIndex]...)
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto2.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io1.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *ResourceRequestMessage) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io1.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &Request{})
			m.Requests[len(m.Requests)-1].Unmarshal(data[index:postIndex])
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto2.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io1.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *ResourceOffersMessage) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io1.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field Offers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			m.Offers = append(m.Offers, &ResourceOffer{})
			m.Offers[len(m.Offers)-1].Unmarshal(data[index:postIndex])
			index = postIndex
		case 2:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field Pids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			m.Pids = append(m.Pids, string(data[index:postIndex]))
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto2.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io1.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *LaunchTasksMessage) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io1.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, &TaskInfo{})
			m.Tasks[len(m.Tasks)-1].Unmarshal(data[index:postIndex])
			index = postIndex
		case 2:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			if m.Filters == nil {
				m.Filters = &Filters{}
			}
			if err := m.Filters.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 3:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field OfferIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			m.OfferIds = append(m.OfferIds, string(data[index:postIndex]))
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto2.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io1.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *RescindResourceOfferMessage) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io1.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field OfferId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.OfferId = &s
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto2.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io1.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *RunTaskMessage) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io1.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Pid = &s
			index = postIndex
		case 2:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			if m.Task == nil {
				m.Task = &TaskInfo{}
			}
			if err := m.Task.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto2.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io1.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *KillTaskMessage) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io1.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field Slave", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			if m.Slave == nil {
				m.Slave = &SlaveInfo{}
			}
			if err := m.Slave.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 2:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.TaskId = &s
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto2.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io1.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *StatusUpdateMessage) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io1.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			if m.Update == nil {
				m.Update = &SlaveTaskStatusUpdate{}
			}
			if err := m.Update.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 2:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.Pid = &s
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto2.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io1.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *TaskStatusMessage) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io1.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field TaskStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			if m.TaskStatus == nil {
				m.TaskStatus = &TaskStatus{}
			}
			if err := m.TaskStatus.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto2.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io1.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *StatusUpdateAcknowledgementMessage) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io1.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field Slave", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			if m.Slave == nil {
				m.Slave = &SlaveInfo{}
			}
			if err := m.Slave.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 2:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.TaskId = &s
			index = postIndex
		case 3:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			m.Uuid = append([]byte{}, data[index:postIndex]...)
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto2.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io1.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *LostSlaveMessage) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io1.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field SlaveId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.SlaveId = &s
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto2.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io1.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *ReconcileTasksMessage) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io1.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field Statuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			m.Statuses = append(m.Statuses, &TaskStatus{})
			m.Statuses[len(m.Statuses)-1].Unmarshal(data[index:postIndex])
			index = postIndex
		case 2:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field SlaveId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + int(stringLen)
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			s := string(data[index:postIndex])
			m.SlaveId = &s
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto2.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io1.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *RegisterSlaveMessage) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io1.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field Slave", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			if m.Slave == nil {
				m.Slave = &SlaveInfo{}
			}
			if err := m.Slave.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto2.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io1.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *ReregisterSlaveMessage) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io1.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field Slave", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			if m.Slave == nil {
				m.Slave = &SlaveInfo{}
			}
			if err := m.Slave.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 2:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, &TaskInfo{})
			m.Tasks[len(m.Tasks)-1].Unmarshal(data[index:postIndex])
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto2.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io1.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *SlaveRegisteredMessage) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io1.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field Slave", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			if m.Slave == nil {
				m.Slave = &SlaveInfo{}
			}
			if err := m.Slave.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto2.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io1.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *SlaveReregisteredMessage) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io1.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field Slave", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			if m.Slave == nil {
				m.Slave = &SlaveInfo{}
			}
			if err := m.Slave.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto2.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io1.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *UnregisterSlaveMessage) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io1.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field Slave", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			if m.Slave == nil {
				m.Slave = &SlaveInfo{}
			}
			if err := m.Slave.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto2.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io1.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *HeartbeatMessage) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io1.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt4.Errorf("proto: wrong wireType = %d for field Slave", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io1.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io1.ErrUnexpectedEOF
			}
			if m.Slave == nil {
				m.Slave = &SlaveInfo{}
			}
			if err := m.Slave.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto2.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io1.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (this *SlaveTaskStatusUpdate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings2.Join([]string{`&SlaveTaskStatusUpdate{`,
		`Slave:` + strings2.Replace(fmt5.Sprintf("%v", this.Slave), "SlaveInfo", "SlaveInfo", 1) + `,`,
		`Status:` + strings2.Replace(fmt5.Sprintf("%v", this.Status), "TaskStatus", "TaskStatus", 1) + `,`,
		`Timestamp:` + valueToStringMessages(this.Timestamp) + `,`,
		`Uuid:` + valueToStringMessages(this.Uuid) + `,`,
		`XXX_unrecognized:` + fmt5.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StatusUpdateRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings2.Join([]string{`&StatusUpdateRecord{`,
		`Type:` + valueToStringMessages(this.Type) + `,`,
		`Update:` + strings2.Replace(fmt5.Sprintf("%v", this.Update), "SlaveTaskStatusUpdate", "SlaveTaskStatusUpdate", 1) + `,`,
		`Uuid:` + valueToStringMessages(this.Uuid) + `,`,
		`XXX_unrecognized:` + fmt5.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResourceRequestMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings2.Join([]string{`&ResourceRequestMessage{`,
		`Requests:` + strings2.Replace(fmt5.Sprintf("%v", this.Requests), "Request", "Request", 1) + `,`,
		`XXX_unrecognized:` + fmt5.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResourceOffersMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings2.Join([]string{`&ResourceOffersMessage{`,
		`Offers:` + strings2.Replace(fmt5.Sprintf("%v", this.Offers), "ResourceOffer", "ResourceOffer", 1) + `,`,
		`Pids:` + fmt5.Sprintf("%v", this.Pids) + `,`,
		`XXX_unrecognized:` + fmt5.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LaunchTasksMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings2.Join([]string{`&LaunchTasksMessage{`,
		`Tasks:` + strings2.Replace(fmt5.Sprintf("%v", this.Tasks), "TaskInfo", "TaskInfo", 1) + `,`,
		`Filters:` + strings2.Replace(fmt5.Sprintf("%v", this.Filters), "Filters", "Filters", 1) + `,`,
		`OfferIds:` + fmt5.Sprintf("%v", this.OfferIds) + `,`,
		`XXX_unrecognized:` + fmt5.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RescindResourceOfferMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings2.Join([]string{`&RescindResourceOfferMessage{`,
		`OfferId:` + valueToStringMessages(this.OfferId) + `,`,
		`XXX_unrecognized:` + fmt5.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RunTaskMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings2.Join([]string{`&RunTaskMessage{`,
		`Pid:` + valueToStringMessages(this.Pid) + `,`,
		`Task:` + strings2.Replace(fmt5.Sprintf("%v", this.Task), "TaskInfo", "TaskInfo", 1) + `,`,
		`XXX_unrecognized:` + fmt5.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KillTaskMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings2.Join([]string{`&KillTaskMessage{`,
		`Slave:` + strings2.Replace(fmt5.Sprintf("%v", this.Slave), "SlaveInfo", "SlaveInfo", 1) + `,`,
		`TaskId:` + valueToStringMessages(this.TaskId) + `,`,
		`XXX_unrecognized:` + fmt5.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StatusUpdateMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings2.Join([]string{`&StatusUpdateMessage{`,
		`Update:` + strings2.Replace(fmt5.Sprintf("%v", this.Update), "SlaveTaskStatusUpdate", "SlaveTaskStatusUpdate", 1) + `,`,
		`Pid:` + valueToStringMessages(this.Pid) + `,`,
		`XXX_unrecognized:` + fmt5.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TaskStatusMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings2.Join([]string{`&TaskStatusMessage{`,
		`TaskStatus:` + strings2.Replace(fmt5.Sprintf("%v", this.TaskStatus), "TaskStatus", "TaskStatus", 1) + `,`,
		`XXX_unrecognized:` + fmt5.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StatusUpdateAcknowledgementMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings2.Join([]string{`&StatusUpdateAcknowledgementMessage{`,
		`Slave:` + strings2.Replace(fmt5.Sprintf("%v", this.Slave), "SlaveInfo", "SlaveInfo", 1) + `,`,
		`TaskId:` + valueToStringMessages(this.TaskId) + `,`,
		`Uuid:` + valueToStringMessages(this.Uuid) + `,`,
		`XXX_unrecognized:` + fmt5.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LostSlaveMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings2.Join([]string{`&LostSlaveMessage{`,
		`SlaveId:` + valueToStringMessages(this.SlaveId) + `,`,
		`XXX_unrecognized:` + fmt5.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReconcileTasksMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings2.Join([]string{`&ReconcileTasksMessage{`,
		`Statuses:` + strings2.Replace(fmt5.Sprintf("%v", this.Statuses), "TaskStatus", "TaskStatus", 1) + `,`,
		`SlaveId:` + valueToStringMessages(this.SlaveId) + `,`,
		`XXX_unrecognized:` + fmt5.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterSlaveMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings2.Join([]string{`&RegisterSlaveMessage{`,
		`Slave:` + strings2.Replace(fmt5.Sprintf("%v", this.Slave), "SlaveInfo", "SlaveInfo", 1) + `,`,
		`XXX_unrecognized:` + fmt5.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReregisterSlaveMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings2.Join([]string{`&ReregisterSlaveMessage{`,
		`Slave:` + strings2.Replace(fmt5.Sprintf("%v", this.Slave), "SlaveInfo", "SlaveInfo", 1) + `,`,
		`Tasks:` + strings2.Replace(fmt5.Sprintf("%v", this.Tasks), "TaskInfo", "TaskInfo", 1) + `,`,
		`XXX_unrecognized:` + fmt5.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SlaveRegisteredMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings2.Join([]string{`&SlaveRegisteredMessage{`,
		`Slave:` + strings2.Replace(fmt5.Sprintf("%v", this.Slave), "SlaveInfo", "SlaveInfo", 1) + `,`,
		`XXX_unrecognized:` + fmt5.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SlaveReregisteredMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings2.Join([]string{`&SlaveReregisteredMessage{`,
		`Slave:` + strings2.Replace(fmt5.Sprintf("%v", this.Slave), "SlaveInfo", "SlaveInfo", 1) + `,`,
		`XXX_unrecognized:` + fmt5.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnregisterSlaveMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings2.Join([]string{`&UnregisterSlaveMessage{`,
		`Slave:` + strings2.Replace(fmt5.Sprintf("%v", this.Slave), "SlaveInfo", "SlaveInfo", 1) + `,`,
		`XXX_unrecognized:` + fmt5.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HeartbeatMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings2.Join([]string{`&HeartbeatMessage{`,
		`Slave:` + strings2.Replace(fmt5.Sprintf("%v", this.Slave), "SlaveInfo", "SlaveInfo", 1) + `,`,
		`XXX_unrecognized:` + fmt5.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessages(v interface{}) string {
	rv := reflect2.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect2.Indirect(rv).Interface()
	return fmt5.Sprintf("*%v", pv)
}
func (m *SlaveTaskStatusUpdate) Size() (n int) {
	var l int
	_ = l
	if m.Slave != nil {
		l = m.Slave.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Timestamp != nil {
		n += 9
	}
	if m.Uuid != nil {
		l = len(m.Uuid)
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatusUpdateRecord) Size() (n int) {
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovMessages(uint64(*m.Type))
	}
	if m.Update != nil {
		l = m.Update.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Uuid != nil {
		l = len(m.Uuid)
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResourceRequestMessage) Size() (n int) {
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResourceOffersMessage) Size() (n int) {
	var l int
	_ = l
	if len(m.Offers) > 0 {
		for _, e := range m.Offers {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	if len(m.Pids) > 0 {
		for _, s := range m.Pids {
			l = len(s)
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LaunchTasksMessage) Size() (n int) {
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	if m.Filters != nil {
		l = m.Filters.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if len(m.OfferIds) > 0 {
		for _, s := range m.OfferIds {
			l = len(s)
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RescindResourceOfferMessage) Size() (n int) {
	var l int
	_ = l
	if m.OfferId != nil {
		l = len(*m.OfferId)
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RunTaskMessage) Size() (n int) {
	var l int
	_ = l
	if m.Pid != nil {
		l = len(*m.Pid)
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Task != nil {
		l = m.Task.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KillTaskMessage) Size() (n int) {
	var l int
	_ = l
	if m.Slave != nil {
		l = m.Slave.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.TaskId != nil {
		l = len(*m.TaskId)
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatusUpdateMessage) Size() (n int) {
	var l int
	_ = l
	if m.Update != nil {
		l = m.Update.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Pid != nil {
		l = len(*m.Pid)
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskStatusMessage) Size() (n int) {
	var l int
	_ = l
	if m.TaskStatus != nil {
		l = m.TaskStatus.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatusUpdateAcknowledgementMessage) Size() (n int) {
	var l int
	_ = l
	if m.Slave != nil {
		l = m.Slave.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.TaskId != nil {
		l = len(*m.TaskId)
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.Uuid != nil {
		l = len(m.Uuid)
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LostSlaveMessage) Size() (n int) {
	var l int
	_ = l
	if m.SlaveId != nil {
		l = len(*m.SlaveId)
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReconcileTasksMessage) Size() (n int) {
	var l int
	_ = l
	if len(m.Statuses) > 0 {
		for _, e := range m.Statuses {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	if m.SlaveId != nil {
		l = len(*m.SlaveId)
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegisterSlaveMessage) Size() (n int) {
	var l int
	_ = l
	if m.Slave != nil {
		l = m.Slave.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReregisterSlaveMessage) Size() (n int) {
	var l int
	_ = l
	if m.Slave != nil {
		l = m.Slave.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SlaveRegisteredMessage) Size() (n int) {
	var l int
	_ = l
	if m.Slave != nil {
		l = m.Slave.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SlaveReregisteredMessage) Size() (n int) {
	var l int
	_ = l
	if m.Slave != nil {
		l = m.Slave.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UnregisterSlaveMessage) Size() (n int) {
	var l int
	_ = l
	if m.Slave != nil {
		l = m.Slave.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HeartbeatMessage) Size() (n int) {
	var l int
	_ = l
	if m.Slave != nil {
		l = m.Slave.Size()
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMessages(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessages(x uint64) (n int) {
	return sovMessages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func NewPopulatedSlaveTaskStatusUpdate(r randyMessages, easy bool) *SlaveTaskStatusUpdate {
	this := &SlaveTaskStatusUpdate{}
	if r.Intn(10) != 0 {
		this.Slave = NewPopulatedSlaveInfo(r, easy)
	}
	this.Status = NewPopulatedTaskStatus(r, easy)
	v1 := r.Float64()
	if r.Intn(2) == 0 {
		v1 *= -1
	}
	this.Timestamp = &v1
	v2 := r.Intn(100)
	this.Uuid = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.Uuid[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 5)
	}
	return this
}

func NewPopulatedStatusUpdateRecord(r randyMessages, easy bool) *StatusUpdateRecord {
	this := &StatusUpdateRecord{}
	v3 := StatusUpdateRecord_Type([]int32{0, 1}[r.Intn(2)])
	this.Type = &v3
	if r.Intn(10) != 0 {
		this.Update = NewPopulatedSlaveTaskStatusUpdate(r, easy)
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(100)
		this.Uuid = make([]byte, v4)
		for i := 0; i < v4; i++ {
			this.Uuid[i] = byte(r.Intn(256))
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 4)
	}
	return this
}

func NewPopulatedResourceRequestMessage(r randyMessages, easy bool) *ResourceRequestMessage {
	this := &ResourceRequestMessage{}
	if r.Intn(10) != 0 {
		v5 := r.Intn(10)
		this.Requests = make([]*Request, v5)
		for i := 0; i < v5; i++ {
			this.Requests[i] = NewPopulatedRequest(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 2)
	}
	return this
}

func NewPopulatedResourceOffersMessage(r randyMessages, easy bool) *ResourceOffersMessage {
	this := &ResourceOffersMessage{}
	if r.Intn(10) != 0 {
		v6 := r.Intn(10)
		this.Offers = make([]*ResourceOffer, v6)
		for i := 0; i < v6; i++ {
			this.Offers[i] = NewPopulatedResourceOffer(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v7 := r.Intn(10)
		this.Pids = make([]string, v7)
		for i := 0; i < v7; i++ {
			this.Pids[i] = randStringMessages(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 3)
	}
	return this
}

func NewPopulatedLaunchTasksMessage(r randyMessages, easy bool) *LaunchTasksMessage {
	this := &LaunchTasksMessage{}
	if r.Intn(10) != 0 {
		v8 := r.Intn(10)
		this.Tasks = make([]*TaskInfo, v8)
		for i := 0; i < v8; i++ {
			this.Tasks[i] = NewPopulatedTaskInfo(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.Filters = NewPopulatedFilters(r, easy)
	}
	if r.Intn(10) != 0 {
		v9 := r.Intn(10)
		this.OfferIds = make([]string, v9)
		for i := 0; i < v9; i++ {
			this.OfferIds[i] = randStringMessages(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 4)
	}
	return this
}

func NewPopulatedRescindResourceOfferMessage(r randyMessages, easy bool) *RescindResourceOfferMessage {
	this := &RescindResourceOfferMessage{}
	if r.Intn(10) != 0 {
		v10 := randStringMessages(r)
		this.OfferId = &v10
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 2)
	}
	return this
}

func NewPopulatedRunTaskMessage(r randyMessages, easy bool) *RunTaskMessage {
	this := &RunTaskMessage{}
	if r.Intn(10) != 0 {
		v11 := randStringMessages(r)
		this.Pid = &v11
	}
	if r.Intn(10) != 0 {
		this.Task = NewPopulatedTaskInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 3)
	}
	return this
}

func NewPopulatedKillTaskMessage(r randyMessages, easy bool) *KillTaskMessage {
	this := &KillTaskMessage{}
	if r.Intn(10) != 0 {
		this.Slave = NewPopulatedSlaveInfo(r, easy)
	}
	if r.Intn(10) != 0 {
		v12 := randStringMessages(r)
		this.TaskId = &v12
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 3)
	}
	return this
}

func NewPopulatedStatusUpdateMessage(r randyMessages, easy bool) *StatusUpdateMessage {
	this := &StatusUpdateMessage{}
	if r.Intn(10) != 0 {
		this.Update = NewPopulatedSlaveTaskStatusUpdate(r, easy)
	}
	if r.Intn(10) != 0 {
		v13 := randStringMessages(r)
		this.Pid = &v13
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 3)
	}
	return this
}

func NewPopulatedTaskStatusMessage(r randyMessages, easy bool) *TaskStatusMessage {
	this := &TaskStatusMessage{}
	if r.Intn(10) != 0 {
		this.TaskStatus = NewPopulatedTaskStatus(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 2)
	}
	return this
}

func NewPopulatedStatusUpdateAcknowledgementMessage(r randyMessages, easy bool) *StatusUpdateAcknowledgementMessage {
	this := &StatusUpdateAcknowledgementMessage{}
	this.Slave = NewPopulatedSlaveInfo(r, easy)
	v14 := randStringMessages(r)
	this.TaskId = &v14
	v15 := r.Intn(100)
	this.Uuid = make([]byte, v15)
	for i := 0; i < v15; i++ {
		this.Uuid[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 4)
	}
	return this
}

func NewPopulatedLostSlaveMessage(r randyMessages, easy bool) *LostSlaveMessage {
	this := &LostSlaveMessage{}
	v16 := randStringMessages(r)
	this.SlaveId = &v16
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 2)
	}
	return this
}

func NewPopulatedReconcileTasksMessage(r randyMessages, easy bool) *ReconcileTasksMessage {
	this := &ReconcileTasksMessage{}
	if r.Intn(10) != 0 {
		v17 := r.Intn(10)
		this.Statuses = make([]*TaskStatus, v17)
		for i := 0; i < v17; i++ {
			this.Statuses[i] = NewPopulatedTaskStatus(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v18 := randStringMessages(r)
		this.SlaveId = &v18
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 3)
	}
	return this
}

func NewPopulatedRegisterSlaveMessage(r randyMessages, easy bool) *RegisterSlaveMessage {
	this := &RegisterSlaveMessage{}
	if r.Intn(10) != 0 {
		this.Slave = NewPopulatedSlaveInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 2)
	}
	return this
}

func NewPopulatedReregisterSlaveMessage(r randyMessages, easy bool) *ReregisterSlaveMessage {
	this := &ReregisterSlaveMessage{}
	if r.Intn(10) != 0 {
		this.Slave = NewPopulatedSlaveInfo(r, easy)
	}
	if r.Intn(10) != 0 {
		v19 := r.Intn(10)
		this.Tasks = make([]*TaskInfo, v19)
		for i := 0; i < v19; i++ {
			this.Tasks[i] = NewPopulatedTaskInfo(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 3)
	}
	return this
}

func NewPopulatedSlaveRegisteredMessage(r randyMessages, easy bool) *SlaveRegisteredMessage {
	this := &SlaveRegisteredMessage{}
	this.Slave = NewPopulatedSlaveInfo(r, easy)
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 2)
	}
	return this
}

func NewPopulatedSlaveReregisteredMessage(r randyMessages, easy bool) *SlaveReregisteredMessage {
	this := &SlaveReregisteredMessage{}
	this.Slave = NewPopulatedSlaveInfo(r, easy)
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 2)
	}
	return this
}

func NewPopulatedUnregisterSlaveMessage(r randyMessages, easy bool) *UnregisterSlaveMessage {
	this := &UnregisterSlaveMessage{}
	this.Slave = NewPopulatedSlaveInfo(r, easy)
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 2)
	}
	return this
}

func NewPopulatedHeartbeatMessage(r randyMessages, easy bool) *HeartbeatMessage {
	this := &HeartbeatMessage{}
	this.Slave = NewPopulatedSlaveInfo(r, easy)
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessages(r, 2)
	}
	return this
}

type randyMessages interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMessages(r randyMessages) rune {
	res := rune(r.Uint32() % 1112064)
	if 55296 <= res {
		res += 2047
	}
	return res
}
func randStringMessages(r randyMessages) string {
	v20 := r.Intn(100)
	tmps := make([]rune, v20)
	for i := 0; i < v20; i++ {
		tmps[i] = randUTF8RuneMessages(r)
	}
	return string(tmps)
}
func randUnrecognizedMessages(r randyMessages, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldMessages(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldMessages(data []byte, r randyMessages, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateMessages(data, uint64(key))
		v21 := r.Int63()
		if r.Intn(2) == 0 {
			v21 *= -1
		}
		data = encodeVarintPopulateMessages(data, uint64(v21))
	case 1:
		data = encodeVarintPopulateMessages(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateMessages(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateMessages(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateMessages(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateMessages(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *SlaveTaskStatusUpdate) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SlaveTaskStatusUpdate) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Slave != nil {
		data[i] = 0xa
		i++
		i = encodeVarintMessages(data, i, uint64(m.Slave.Size()))
		n1, err := m.Slave.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Status != nil {
		data[i] = 0x12
		i++
		i = encodeVarintMessages(data, i, uint64(m.Status.Size()))
		n2, err := m.Status.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Timestamp != nil {
		data[i] = 0x19
		i++
		i = encodeFixed64Messages(data, i, uint64(math4.Float64bits(*m.Timestamp)))
	}
	if m.Uuid != nil {
		data[i] = 0x22
		i++
		i = encodeVarintMessages(data, i, uint64(len(m.Uuid)))
		i += copy(data[i:], m.Uuid)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StatusUpdateRecord) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StatusUpdateRecord) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		data[i] = 0x8
		i++
		i = encodeVarintMessages(data, i, uint64(*m.Type))
	}
	if m.Update != nil {
		data[i] = 0x12
		i++
		i = encodeVarintMessages(data, i, uint64(m.Update.Size()))
		n3, err := m.Update.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Uuid != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintMessages(data, i, uint64(len(m.Uuid)))
		i += copy(data[i:], m.Uuid)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ResourceRequestMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ResourceRequestMessage) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, msg := range m.Requests {
			data[i] = 0xa
			i++
			i = encodeVarintMessages(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ResourceOffersMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ResourceOffersMessage) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Offers) > 0 {
		for _, msg := range m.Offers {
			data[i] = 0xa
			i++
			i = encodeVarintMessages(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Pids) > 0 {
		for _, s := range m.Pids {
			data[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LaunchTasksMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LaunchTasksMessage) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for _, msg := range m.Tasks {
			data[i] = 0xa
			i++
			i = encodeVarintMessages(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Filters != nil {
		data[i] = 0x12
		i++
		i = encodeVarintMessages(data, i, uint64(m.Filters.Size()))
		n4, err := m.Filters.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.OfferIds) > 0 {
		for _, s := range m.OfferIds {
			data[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RescindResourceOfferMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RescindResourceOfferMessage) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OfferId != nil {
		data[i] = 0xa
		i++
		i = encodeVarintMessages(data, i, uint64(len(*m.OfferId)))
		i += copy(data[i:], *m.OfferId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RunTaskMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RunTaskMessage) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pid != nil {
		data[i] = 0xa
		i++
		i = encodeVarintMessages(data, i, uint64(len(*m.Pid)))
		i += copy(data[i:], *m.Pid)
	}
	if m.Task != nil {
		data[i] = 0x12
		i++
		i = encodeVarintMessages(data, i, uint64(m.Task.Size()))
		n5, err := m.Task.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KillTaskMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *KillTaskMessage) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Slave != nil {
		data[i] = 0xa
		i++
		i = encodeVarintMessages(data, i, uint64(m.Slave.Size()))
		n6, err := m.Slave.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.TaskId != nil {
		data[i] = 0x12
		i++
		i = encodeVarintMessages(data, i, uint64(len(*m.TaskId)))
		i += copy(data[i:], *m.TaskId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StatusUpdateMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StatusUpdateMessage) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Update != nil {
		data[i] = 0xa
		i++
		i = encodeVarintMessages(data, i, uint64(m.Update.Size()))
		n7, err := m.Update.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Pid != nil {
		data[i] = 0x12
		i++
		i = encodeVarintMessages(data, i, uint64(len(*m.Pid)))
		i += copy(data[i:], *m.Pid)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TaskStatusMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *TaskStatusMessage) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TaskStatus != nil {
		data[i] = 0xa
		i++
		i = encodeVarintMessages(data, i, uint64(m.TaskStatus.Size()))
		n8, err := m.TaskStatus.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StatusUpdateAcknowledgementMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *StatusUpdateAcknowledgementMessage) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Slave != nil {
		data[i] = 0xa
		i++
		i = encodeVarintMessages(data, i, uint64(m.Slave.Size()))
		n9, err := m.Slave.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.TaskId != nil {
		data[i] = 0x12
		i++
		i = encodeVarintMessages(data, i, uint64(len(*m.TaskId)))
		i += copy(data[i:], *m.TaskId)
	}
	if m.Uuid != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintMessages(data, i, uint64(len(m.Uuid)))
		i += copy(data[i:], m.Uuid)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LostSlaveMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LostSlaveMessage) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SlaveId != nil {
		data[i] = 0xa
		i++
		i = encodeVarintMessages(data, i, uint64(len(*m.SlaveId)))
		i += copy(data[i:], *m.SlaveId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ReconcileTasksMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ReconcileTasksMessage) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Statuses) > 0 {
		for _, msg := range m.Statuses {
			data[i] = 0xa
			i++
			i = encodeVarintMessages(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.SlaveId != nil {
		data[i] = 0x12
		i++
		i = encodeVarintMessages(data, i, uint64(len(*m.SlaveId)))
		i += copy(data[i:], *m.SlaveId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RegisterSlaveMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RegisterSlaveMessage) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Slave != nil {
		data[i] = 0xa
		i++
		i = encodeVarintMessages(data, i, uint64(m.Slave.Size()))
		n10, err := m.Slave.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ReregisterSlaveMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ReregisterSlaveMessage) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Slave != nil {
		data[i] = 0xa
		i++
		i = encodeVarintMessages(data, i, uint64(m.Slave.Size()))
		n11, err := m.Slave.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.Tasks) > 0 {
		for _, msg := range m.Tasks {
			data[i] = 0x12
			i++
			i = encodeVarintMessages(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SlaveRegisteredMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SlaveRegisteredMessage) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Slave != nil {
		data[i] = 0xa
		i++
		i = encodeVarintMessages(data, i, uint64(m.Slave.Size()))
		n12, err := m.Slave.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SlaveReregisteredMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SlaveReregisteredMessage) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Slave != nil {
		data[i] = 0xa
		i++
		i = encodeVarintMessages(data, i, uint64(m.Slave.Size()))
		n13, err := m.Slave.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UnregisterSlaveMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UnregisterSlaveMessage) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Slave != nil {
		data[i] = 0xa
		i++
		i = encodeVarintMessages(data, i, uint64(m.Slave.Size()))
		n14, err := m.Slave.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HeartbeatMessage) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *HeartbeatMessage) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Slave != nil {
		data[i] = 0xa
		i++
		i = encodeVarintMessages(data, i, uint64(m.Slave.Size()))
		n15, err := m.Slave.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Messages(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Messages(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMessages(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (this *SlaveTaskStatusUpdate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings3.Join([]string{`&proto.SlaveTaskStatusUpdate{` +
		`Slave:` + fmt6.Sprintf("%#v", this.Slave),
		`Status:` + fmt6.Sprintf("%#v", this.Status),
		`Timestamp:` + valueToGoStringMessages(this.Timestamp, "float64"),
		`Uuid:` + valueToGoStringMessages(this.Uuid, "byte"),
		`XXX_unrecognized:` + fmt6.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *StatusUpdateRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings3.Join([]string{`&proto.StatusUpdateRecord{` +
		`Type:` + valueToGoStringMessages(this.Type, "proto.StatusUpdateRecord_Type"),
		`Update:` + fmt6.Sprintf("%#v", this.Update),
		`Uuid:` + valueToGoStringMessages(this.Uuid, "byte"),
		`XXX_unrecognized:` + fmt6.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *ResourceRequestMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings3.Join([]string{`&proto.ResourceRequestMessage{` +
		`Requests:` + fmt6.Sprintf("%#v", this.Requests),
		`XXX_unrecognized:` + fmt6.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *ResourceOffersMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings3.Join([]string{`&proto.ResourceOffersMessage{` +
		`Offers:` + fmt6.Sprintf("%#v", this.Offers),
		`Pids:` + fmt6.Sprintf("%#v", this.Pids),
		`XXX_unrecognized:` + fmt6.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *LaunchTasksMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings3.Join([]string{`&proto.LaunchTasksMessage{` +
		`Tasks:` + fmt6.Sprintf("%#v", this.Tasks),
		`Filters:` + fmt6.Sprintf("%#v", this.Filters),
		`OfferIds:` + fmt6.Sprintf("%#v", this.OfferIds),
		`XXX_unrecognized:` + fmt6.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *RescindResourceOfferMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings3.Join([]string{`&proto.RescindResourceOfferMessage{` +
		`OfferId:` + valueToGoStringMessages(this.OfferId, "string"),
		`XXX_unrecognized:` + fmt6.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *RunTaskMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings3.Join([]string{`&proto.RunTaskMessage{` +
		`Pid:` + valueToGoStringMessages(this.Pid, "string"),
		`Task:` + fmt6.Sprintf("%#v", this.Task),
		`XXX_unrecognized:` + fmt6.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *KillTaskMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings3.Join([]string{`&proto.KillTaskMessage{` +
		`Slave:` + fmt6.Sprintf("%#v", this.Slave),
		`TaskId:` + valueToGoStringMessages(this.TaskId, "string"),
		`XXX_unrecognized:` + fmt6.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *StatusUpdateMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings3.Join([]string{`&proto.StatusUpdateMessage{` +
		`Update:` + fmt6.Sprintf("%#v", this.Update),
		`Pid:` + valueToGoStringMessages(this.Pid, "string"),
		`XXX_unrecognized:` + fmt6.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *TaskStatusMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings3.Join([]string{`&proto.TaskStatusMessage{` +
		`TaskStatus:` + fmt6.Sprintf("%#v", this.TaskStatus),
		`XXX_unrecognized:` + fmt6.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *StatusUpdateAcknowledgementMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings3.Join([]string{`&proto.StatusUpdateAcknowledgementMessage{` +
		`Slave:` + fmt6.Sprintf("%#v", this.Slave),
		`TaskId:` + valueToGoStringMessages(this.TaskId, "string"),
		`Uuid:` + valueToGoStringMessages(this.Uuid, "byte"),
		`XXX_unrecognized:` + fmt6.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *LostSlaveMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings3.Join([]string{`&proto.LostSlaveMessage{` +
		`SlaveId:` + valueToGoStringMessages(this.SlaveId, "string"),
		`XXX_unrecognized:` + fmt6.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *ReconcileTasksMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings3.Join([]string{`&proto.ReconcileTasksMessage{` +
		`Statuses:` + fmt6.Sprintf("%#v", this.Statuses),
		`SlaveId:` + valueToGoStringMessages(this.SlaveId, "string"),
		`XXX_unrecognized:` + fmt6.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *RegisterSlaveMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings3.Join([]string{`&proto.RegisterSlaveMessage{` +
		`Slave:` + fmt6.Sprintf("%#v", this.Slave),
		`XXX_unrecognized:` + fmt6.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *ReregisterSlaveMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings3.Join([]string{`&proto.ReregisterSlaveMessage{` +
		`Slave:` + fmt6.Sprintf("%#v", this.Slave),
		`Tasks:` + fmt6.Sprintf("%#v", this.Tasks),
		`XXX_unrecognized:` + fmt6.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *SlaveRegisteredMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings3.Join([]string{`&proto.SlaveRegisteredMessage{` +
		`Slave:` + fmt6.Sprintf("%#v", this.Slave),
		`XXX_unrecognized:` + fmt6.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *SlaveReregisteredMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings3.Join([]string{`&proto.SlaveReregisteredMessage{` +
		`Slave:` + fmt6.Sprintf("%#v", this.Slave),
		`XXX_unrecognized:` + fmt6.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *UnregisterSlaveMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings3.Join([]string{`&proto.UnregisterSlaveMessage{` +
		`Slave:` + fmt6.Sprintf("%#v", this.Slave),
		`XXX_unrecognized:` + fmt6.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *HeartbeatMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings3.Join([]string{`&proto.HeartbeatMessage{` +
		`Slave:` + fmt6.Sprintf("%#v", this.Slave),
		`XXX_unrecognized:` + fmt6.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func valueToGoStringMessages(v interface{}, typ string) string {
	rv := reflect3.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect3.Indirect(rv).Interface()
	return fmt6.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringMessages(e map[int32]github_com_gogo_protobuf_proto3.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort1.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv1.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings3.Join(ss, ",") + "}"
	return s
}
func (this *SlaveTaskStatusUpdate) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SlaveTaskStatusUpdate)
	if !ok {
		return fmt7.Errorf("that is not of type *SlaveTaskStatusUpdate")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that is type *SlaveTaskStatusUpdate but is nil && this != nil")
	} else if this == nil {
		return fmt7.Errorf("that is type *SlaveTaskStatusUpdatebut is not nil && this == nil")
	}
	if !this.Slave.Equal(that1.Slave) {
		return fmt7.Errorf("Slave this(%v) Not Equal that(%v)", this.Slave, that1.Slave)
	}
	if !this.Status.Equal(that1.Status) {
		return fmt7.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.Timestamp != nil && that1.Timestamp != nil {
		if *this.Timestamp != *that1.Timestamp {
			return fmt7.Errorf("Timestamp this(%v) Not Equal that(%v)", *this.Timestamp, *that1.Timestamp)
		}
	} else if this.Timestamp != nil {
		return fmt7.Errorf("this.Timestamp == nil && that.Timestamp != nil")
	} else if that1.Timestamp != nil {
		return fmt7.Errorf("Timestamp this(%v) Not Equal that(%v)", this.Timestamp, that1.Timestamp)
	}
	if !bytes1.Equal(this.Uuid, that1.Uuid) {
		return fmt7.Errorf("Uuid this(%v) Not Equal that(%v)", this.Uuid, that1.Uuid)
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt7.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SlaveTaskStatusUpdate) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SlaveTaskStatusUpdate)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Slave.Equal(that1.Slave) {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	if this.Timestamp != nil && that1.Timestamp != nil {
		if *this.Timestamp != *that1.Timestamp {
			return false
		}
	} else if this.Timestamp != nil {
		return false
	} else if that1.Timestamp != nil {
		return false
	}
	if !bytes1.Equal(this.Uuid, that1.Uuid) {
		return false
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *StatusUpdateRecord) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*StatusUpdateRecord)
	if !ok {
		return fmt7.Errorf("that is not of type *StatusUpdateRecord")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that is type *StatusUpdateRecord but is nil && this != nil")
	} else if this == nil {
		return fmt7.Errorf("that is type *StatusUpdateRecordbut is not nil && this == nil")
	}
	if this.Type != nil && that1.Type != nil {
		if *this.Type != *that1.Type {
			return fmt7.Errorf("Type this(%v) Not Equal that(%v)", *this.Type, *that1.Type)
		}
	} else if this.Type != nil {
		return fmt7.Errorf("this.Type == nil && that.Type != nil")
	} else if that1.Type != nil {
		return fmt7.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if !this.Update.Equal(that1.Update) {
		return fmt7.Errorf("Update this(%v) Not Equal that(%v)", this.Update, that1.Update)
	}
	if !bytes1.Equal(this.Uuid, that1.Uuid) {
		return fmt7.Errorf("Uuid this(%v) Not Equal that(%v)", this.Uuid, that1.Uuid)
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt7.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *StatusUpdateRecord) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*StatusUpdateRecord)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Type != nil && that1.Type != nil {
		if *this.Type != *that1.Type {
			return false
		}
	} else if this.Type != nil {
		return false
	} else if that1.Type != nil {
		return false
	}
	if !this.Update.Equal(that1.Update) {
		return false
	}
	if !bytes1.Equal(this.Uuid, that1.Uuid) {
		return false
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ResourceRequestMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ResourceRequestMessage)
	if !ok {
		return fmt7.Errorf("that is not of type *ResourceRequestMessage")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that is type *ResourceRequestMessage but is nil && this != nil")
	} else if this == nil {
		return fmt7.Errorf("that is type *ResourceRequestMessagebut is not nil && this == nil")
	}
	if len(this.Requests) != len(that1.Requests) {
		return fmt7.Errorf("Requests this(%v) Not Equal that(%v)", len(this.Requests), len(that1.Requests))
	}
	for i := range this.Requests {
		if !this.Requests[i].Equal(that1.Requests[i]) {
			return fmt7.Errorf("Requests this[%v](%v) Not Equal that[%v](%v)", i, this.Requests[i], i, that1.Requests[i])
		}
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt7.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ResourceRequestMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResourceRequestMessage)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Requests) != len(that1.Requests) {
		return false
	}
	for i := range this.Requests {
		if !this.Requests[i].Equal(that1.Requests[i]) {
			return false
		}
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ResourceOffersMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ResourceOffersMessage)
	if !ok {
		return fmt7.Errorf("that is not of type *ResourceOffersMessage")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that is type *ResourceOffersMessage but is nil && this != nil")
	} else if this == nil {
		return fmt7.Errorf("that is type *ResourceOffersMessagebut is not nil && this == nil")
	}
	if len(this.Offers) != len(that1.Offers) {
		return fmt7.Errorf("Offers this(%v) Not Equal that(%v)", len(this.Offers), len(that1.Offers))
	}
	for i := range this.Offers {
		if !this.Offers[i].Equal(that1.Offers[i]) {
			return fmt7.Errorf("Offers this[%v](%v) Not Equal that[%v](%v)", i, this.Offers[i], i, that1.Offers[i])
		}
	}
	if len(this.Pids) != len(that1.Pids) {
		return fmt7.Errorf("Pids this(%v) Not Equal that(%v)", len(this.Pids), len(that1.Pids))
	}
	for i := range this.Pids {
		if this.Pids[i] != that1.Pids[i] {
			return fmt7.Errorf("Pids this[%v](%v) Not Equal that[%v](%v)", i, this.Pids[i], i, that1.Pids[i])
		}
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt7.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ResourceOffersMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ResourceOffersMessage)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Offers) != len(that1.Offers) {
		return false
	}
	for i := range this.Offers {
		if !this.Offers[i].Equal(that1.Offers[i]) {
			return false
		}
	}
	if len(this.Pids) != len(that1.Pids) {
		return false
	}
	for i := range this.Pids {
		if this.Pids[i] != that1.Pids[i] {
			return false
		}
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LaunchTasksMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*LaunchTasksMessage)
	if !ok {
		return fmt7.Errorf("that is not of type *LaunchTasksMessage")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that is type *LaunchTasksMessage but is nil && this != nil")
	} else if this == nil {
		return fmt7.Errorf("that is type *LaunchTasksMessagebut is not nil && this == nil")
	}
	if len(this.Tasks) != len(that1.Tasks) {
		return fmt7.Errorf("Tasks this(%v) Not Equal that(%v)", len(this.Tasks), len(that1.Tasks))
	}
	for i := range this.Tasks {
		if !this.Tasks[i].Equal(that1.Tasks[i]) {
			return fmt7.Errorf("Tasks this[%v](%v) Not Equal that[%v](%v)", i, this.Tasks[i], i, that1.Tasks[i])
		}
	}
	if !this.Filters.Equal(that1.Filters) {
		return fmt7.Errorf("Filters this(%v) Not Equal that(%v)", this.Filters, that1.Filters)
	}
	if len(this.OfferIds) != len(that1.OfferIds) {
		return fmt7.Errorf("OfferIds this(%v) Not Equal that(%v)", len(this.OfferIds), len(that1.OfferIds))
	}
	for i := range this.OfferIds {
		if this.OfferIds[i] != that1.OfferIds[i] {
			return fmt7.Errorf("OfferIds this[%v](%v) Not Equal that[%v](%v)", i, this.OfferIds[i], i, that1.OfferIds[i])
		}
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt7.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *LaunchTasksMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LaunchTasksMessage)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Tasks) != len(that1.Tasks) {
		return false
	}
	for i := range this.Tasks {
		if !this.Tasks[i].Equal(that1.Tasks[i]) {
			return false
		}
	}
	if !this.Filters.Equal(that1.Filters) {
		return false
	}
	if len(this.OfferIds) != len(that1.OfferIds) {
		return false
	}
	for i := range this.OfferIds {
		if this.OfferIds[i] != that1.OfferIds[i] {
			return false
		}
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RescindResourceOfferMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RescindResourceOfferMessage)
	if !ok {
		return fmt7.Errorf("that is not of type *RescindResourceOfferMessage")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that is type *RescindResourceOfferMessage but is nil && this != nil")
	} else if this == nil {
		return fmt7.Errorf("that is type *RescindResourceOfferMessagebut is not nil && this == nil")
	}
	if this.OfferId != nil && that1.OfferId != nil {
		if *this.OfferId != *that1.OfferId {
			return fmt7.Errorf("OfferId this(%v) Not Equal that(%v)", *this.OfferId, *that1.OfferId)
		}
	} else if this.OfferId != nil {
		return fmt7.Errorf("this.OfferId == nil && that.OfferId != nil")
	} else if that1.OfferId != nil {
		return fmt7.Errorf("OfferId this(%v) Not Equal that(%v)", this.OfferId, that1.OfferId)
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt7.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *RescindResourceOfferMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RescindResourceOfferMessage)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.OfferId != nil && that1.OfferId != nil {
		if *this.OfferId != *that1.OfferId {
			return false
		}
	} else if this.OfferId != nil {
		return false
	} else if that1.OfferId != nil {
		return false
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RunTaskMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RunTaskMessage)
	if !ok {
		return fmt7.Errorf("that is not of type *RunTaskMessage")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that is type *RunTaskMessage but is nil && this != nil")
	} else if this == nil {
		return fmt7.Errorf("that is type *RunTaskMessagebut is not nil && this == nil")
	}
	if this.Pid != nil && that1.Pid != nil {
		if *this.Pid != *that1.Pid {
			return fmt7.Errorf("Pid this(%v) Not Equal that(%v)", *this.Pid, *that1.Pid)
		}
	} else if this.Pid != nil {
		return fmt7.Errorf("this.Pid == nil && that.Pid != nil")
	} else if that1.Pid != nil {
		return fmt7.Errorf("Pid this(%v) Not Equal that(%v)", this.Pid, that1.Pid)
	}
	if !this.Task.Equal(that1.Task) {
		return fmt7.Errorf("Task this(%v) Not Equal that(%v)", this.Task, that1.Task)
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt7.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *RunTaskMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RunTaskMessage)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Pid != nil && that1.Pid != nil {
		if *this.Pid != *that1.Pid {
			return false
		}
	} else if this.Pid != nil {
		return false
	} else if that1.Pid != nil {
		return false
	}
	if !this.Task.Equal(that1.Task) {
		return false
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *KillTaskMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*KillTaskMessage)
	if !ok {
		return fmt7.Errorf("that is not of type *KillTaskMessage")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that is type *KillTaskMessage but is nil && this != nil")
	} else if this == nil {
		return fmt7.Errorf("that is type *KillTaskMessagebut is not nil && this == nil")
	}
	if !this.Slave.Equal(that1.Slave) {
		return fmt7.Errorf("Slave this(%v) Not Equal that(%v)", this.Slave, that1.Slave)
	}
	if this.TaskId != nil && that1.TaskId != nil {
		if *this.TaskId != *that1.TaskId {
			return fmt7.Errorf("TaskId this(%v) Not Equal that(%v)", *this.TaskId, *that1.TaskId)
		}
	} else if this.TaskId != nil {
		return fmt7.Errorf("this.TaskId == nil && that.TaskId != nil")
	} else if that1.TaskId != nil {
		return fmt7.Errorf("TaskId this(%v) Not Equal that(%v)", this.TaskId, that1.TaskId)
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt7.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *KillTaskMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*KillTaskMessage)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Slave.Equal(that1.Slave) {
		return false
	}
	if this.TaskId != nil && that1.TaskId != nil {
		if *this.TaskId != *that1.TaskId {
			return false
		}
	} else if this.TaskId != nil {
		return false
	} else if that1.TaskId != nil {
		return false
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *StatusUpdateMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*StatusUpdateMessage)
	if !ok {
		return fmt7.Errorf("that is not of type *StatusUpdateMessage")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that is type *StatusUpdateMessage but is nil && this != nil")
	} else if this == nil {
		return fmt7.Errorf("that is type *StatusUpdateMessagebut is not nil && this == nil")
	}
	if !this.Update.Equal(that1.Update) {
		return fmt7.Errorf("Update this(%v) Not Equal that(%v)", this.Update, that1.Update)
	}
	if this.Pid != nil && that1.Pid != nil {
		if *this.Pid != *that1.Pid {
			return fmt7.Errorf("Pid this(%v) Not Equal that(%v)", *this.Pid, *that1.Pid)
		}
	} else if this.Pid != nil {
		return fmt7.Errorf("this.Pid == nil && that.Pid != nil")
	} else if that1.Pid != nil {
		return fmt7.Errorf("Pid this(%v) Not Equal that(%v)", this.Pid, that1.Pid)
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt7.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *StatusUpdateMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*StatusUpdateMessage)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Update.Equal(that1.Update) {
		return false
	}
	if this.Pid != nil && that1.Pid != nil {
		if *this.Pid != *that1.Pid {
			return false
		}
	} else if this.Pid != nil {
		return false
	} else if that1.Pid != nil {
		return false
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *TaskStatusMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*TaskStatusMessage)
	if !ok {
		return fmt7.Errorf("that is not of type *TaskStatusMessage")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that is type *TaskStatusMessage but is nil && this != nil")
	} else if this == nil {
		return fmt7.Errorf("that is type *TaskStatusMessagebut is not nil && this == nil")
	}
	if !this.TaskStatus.Equal(that1.TaskStatus) {
		return fmt7.Errorf("TaskStatus this(%v) Not Equal that(%v)", this.TaskStatus, that1.TaskStatus)
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt7.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *TaskStatusMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TaskStatusMessage)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.TaskStatus.Equal(that1.TaskStatus) {
		return false
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *StatusUpdateAcknowledgementMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*StatusUpdateAcknowledgementMessage)
	if !ok {
		return fmt7.Errorf("that is not of type *StatusUpdateAcknowledgementMessage")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that is type *StatusUpdateAcknowledgementMessage but is nil && this != nil")
	} else if this == nil {
		return fmt7.Errorf("that is type *StatusUpdateAcknowledgementMessagebut is not nil && this == nil")
	}
	if !this.Slave.Equal(that1.Slave) {
		return fmt7.Errorf("Slave this(%v) Not Equal that(%v)", this.Slave, that1.Slave)
	}
	if this.TaskId != nil && that1.TaskId != nil {
		if *this.TaskId != *that1.TaskId {
			return fmt7.Errorf("TaskId this(%v) Not Equal that(%v)", *this.TaskId, *that1.TaskId)
		}
	} else if this.TaskId != nil {
		return fmt7.Errorf("this.TaskId == nil && that.TaskId != nil")
	} else if that1.TaskId != nil {
		return fmt7.Errorf("TaskId this(%v) Not Equal that(%v)", this.TaskId, that1.TaskId)
	}
	if !bytes1.Equal(this.Uuid, that1.Uuid) {
		return fmt7.Errorf("Uuid this(%v) Not Equal that(%v)", this.Uuid, that1.Uuid)
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt7.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *StatusUpdateAcknowledgementMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*StatusUpdateAcknowledgementMessage)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Slave.Equal(that1.Slave) {
		return false
	}
	if this.TaskId != nil && that1.TaskId != nil {
		if *this.TaskId != *that1.TaskId {
			return false
		}
	} else if this.TaskId != nil {
		return false
	} else if that1.TaskId != nil {
		return false
	}
	if !bytes1.Equal(this.Uuid, that1.Uuid) {
		return false
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *LostSlaveMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*LostSlaveMessage)
	if !ok {
		return fmt7.Errorf("that is not of type *LostSlaveMessage")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that is type *LostSlaveMessage but is nil && this != nil")
	} else if this == nil {
		return fmt7.Errorf("that is type *LostSlaveMessagebut is not nil && this == nil")
	}
	if this.SlaveId != nil && that1.SlaveId != nil {
		if *this.SlaveId != *that1.SlaveId {
			return fmt7.Errorf("SlaveId this(%v) Not Equal that(%v)", *this.SlaveId, *that1.SlaveId)
		}
	} else if this.SlaveId != nil {
		return fmt7.Errorf("this.SlaveId == nil && that.SlaveId != nil")
	} else if that1.SlaveId != nil {
		return fmt7.Errorf("SlaveId this(%v) Not Equal that(%v)", this.SlaveId, that1.SlaveId)
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt7.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *LostSlaveMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LostSlaveMessage)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.SlaveId != nil && that1.SlaveId != nil {
		if *this.SlaveId != *that1.SlaveId {
			return false
		}
	} else if this.SlaveId != nil {
		return false
	} else if that1.SlaveId != nil {
		return false
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ReconcileTasksMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ReconcileTasksMessage)
	if !ok {
		return fmt7.Errorf("that is not of type *ReconcileTasksMessage")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that is type *ReconcileTasksMessage but is nil && this != nil")
	} else if this == nil {
		return fmt7.Errorf("that is type *ReconcileTasksMessagebut is not nil && this == nil")
	}
	if len(this.Statuses) != len(that1.Statuses) {
		return fmt7.Errorf("Statuses this(%v) Not Equal that(%v)", len(this.Statuses), len(that1.Statuses))
	}
	for i := range this.Statuses {
		if !this.Statuses[i].Equal(that1.Statuses[i]) {
			return fmt7.Errorf("Statuses this[%v](%v) Not Equal that[%v](%v)", i, this.Statuses[i], i, that1.Statuses[i])
		}
	}
	if this.SlaveId != nil && that1.SlaveId != nil {
		if *this.SlaveId != *that1.SlaveId {
			return fmt7.Errorf("SlaveId this(%v) Not Equal that(%v)", *this.SlaveId, *that1.SlaveId)
		}
	} else if this.SlaveId != nil {
		return fmt7.Errorf("this.SlaveId == nil && that.SlaveId != nil")
	} else if that1.SlaveId != nil {
		return fmt7.Errorf("SlaveId this(%v) Not Equal that(%v)", this.SlaveId, that1.SlaveId)
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt7.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ReconcileTasksMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ReconcileTasksMessage)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Statuses) != len(that1.Statuses) {
		return false
	}
	for i := range this.Statuses {
		if !this.Statuses[i].Equal(that1.Statuses[i]) {
			return false
		}
	}
	if this.SlaveId != nil && that1.SlaveId != nil {
		if *this.SlaveId != *that1.SlaveId {
			return false
		}
	} else if this.SlaveId != nil {
		return false
	} else if that1.SlaveId != nil {
		return false
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RegisterSlaveMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RegisterSlaveMessage)
	if !ok {
		return fmt7.Errorf("that is not of type *RegisterSlaveMessage")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that is type *RegisterSlaveMessage but is nil && this != nil")
	} else if this == nil {
		return fmt7.Errorf("that is type *RegisterSlaveMessagebut is not nil && this == nil")
	}
	if !this.Slave.Equal(that1.Slave) {
		return fmt7.Errorf("Slave this(%v) Not Equal that(%v)", this.Slave, that1.Slave)
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt7.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *RegisterSlaveMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*RegisterSlaveMessage)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Slave.Equal(that1.Slave) {
		return false
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ReregisterSlaveMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ReregisterSlaveMessage)
	if !ok {
		return fmt7.Errorf("that is not of type *ReregisterSlaveMessage")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that is type *ReregisterSlaveMessage but is nil && this != nil")
	} else if this == nil {
		return fmt7.Errorf("that is type *ReregisterSlaveMessagebut is not nil && this == nil")
	}
	if !this.Slave.Equal(that1.Slave) {
		return fmt7.Errorf("Slave this(%v) Not Equal that(%v)", this.Slave, that1.Slave)
	}
	if len(this.Tasks) != len(that1.Tasks) {
		return fmt7.Errorf("Tasks this(%v) Not Equal that(%v)", len(this.Tasks), len(that1.Tasks))
	}
	for i := range this.Tasks {
		if !this.Tasks[i].Equal(that1.Tasks[i]) {
			return fmt7.Errorf("Tasks this[%v](%v) Not Equal that[%v](%v)", i, this.Tasks[i], i, that1.Tasks[i])
		}
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt7.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ReregisterSlaveMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ReregisterSlaveMessage)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Slave.Equal(that1.Slave) {
		return false
	}
	if len(this.Tasks) != len(that1.Tasks) {
		return false
	}
	for i := range this.Tasks {
		if !this.Tasks[i].Equal(that1.Tasks[i]) {
			return false
		}
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SlaveRegisteredMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SlaveRegisteredMessage)
	if !ok {
		return fmt7.Errorf("that is not of type *SlaveRegisteredMessage")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that is type *SlaveRegisteredMessage but is nil && this != nil")
	} else if this == nil {
		return fmt7.Errorf("that is type *SlaveRegisteredMessagebut is not nil && this == nil")
	}
	if !this.Slave.Equal(that1.Slave) {
		return fmt7.Errorf("Slave this(%v) Not Equal that(%v)", this.Slave, that1.Slave)
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt7.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SlaveRegisteredMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SlaveRegisteredMessage)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Slave.Equal(that1.Slave) {
		return false
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *SlaveReregisteredMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*SlaveReregisteredMessage)
	if !ok {
		return fmt7.Errorf("that is not of type *SlaveReregisteredMessage")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that is type *SlaveReregisteredMessage but is nil && this != nil")
	} else if this == nil {
		return fmt7.Errorf("that is type *SlaveReregisteredMessagebut is not nil && this == nil")
	}
	if !this.Slave.Equal(that1.Slave) {
		return fmt7.Errorf("Slave this(%v) Not Equal that(%v)", this.Slave, that1.Slave)
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt7.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *SlaveReregisteredMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*SlaveReregisteredMessage)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Slave.Equal(that1.Slave) {
		return false
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UnregisterSlaveMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UnregisterSlaveMessage)
	if !ok {
		return fmt7.Errorf("that is not of type *UnregisterSlaveMessage")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that is type *UnregisterSlaveMessage but is nil && this != nil")
	} else if this == nil {
		return fmt7.Errorf("that is type *UnregisterSlaveMessagebut is not nil && this == nil")
	}
	if !this.Slave.Equal(that1.Slave) {
		return fmt7.Errorf("Slave this(%v) Not Equal that(%v)", this.Slave, that1.Slave)
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt7.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *UnregisterSlaveMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*UnregisterSlaveMessage)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Slave.Equal(that1.Slave) {
		return false
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *HeartbeatMessage) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*HeartbeatMessage)
	if !ok {
		return fmt7.Errorf("that is not of type *HeartbeatMessage")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt7.Errorf("that is type *HeartbeatMessage but is nil && this != nil")
	} else if this == nil {
		return fmt7.Errorf("that is type *HeartbeatMessagebut is not nil && this == nil")
	}
	if !this.Slave.Equal(that1.Slave) {
		return fmt7.Errorf("Slave this(%v) Not Equal that(%v)", this.Slave, that1.Slave)
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt7.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *HeartbeatMessage) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HeartbeatMessage)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Slave.Equal(that1.Slave) {
		return false
	}
	if !bytes1.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
