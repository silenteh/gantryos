// Code generated by protoc-gen-gogo.
// source: messages.proto
// DO NOT EDIT!

package proto

import testing7 "testing"
import math_rand7 "math/rand"
import time7 "time"
import github_com_gogo_protobuf_proto4 "github.com/gogo/protobuf/proto"
import testing8 "testing"
import math_rand8 "math/rand"
import time8 "time"
import encoding_json1 "encoding/json"
import testing9 "testing"
import math_rand9 "math/rand"
import time9 "time"
import github_com_gogo_protobuf_proto5 "github.com/gogo/protobuf/proto"
import math_rand10 "math/rand"
import time10 "time"
import testing10 "testing"
import fmt2 "fmt"
import math_rand11 "math/rand"
import time11 "time"
import testing11 "testing"
import github_com_gogo_protobuf_proto6 "github.com/gogo/protobuf/proto"
import math_rand12 "math/rand"
import time12 "time"
import testing12 "testing"
import fmt3 "fmt"
import go_parser1 "go/parser"
import math_rand13 "math/rand"
import time13 "time"
import testing13 "testing"
import github_com_gogo_protobuf_proto7 "github.com/gogo/protobuf/proto"

func TestStatusUpdateProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedStatusUpdate(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &StatusUpdate{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestStatusUpdateMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedStatusUpdate(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &StatusUpdate{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkStatusUpdateProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*StatusUpdate, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedStatusUpdate(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkStatusUpdateProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedStatusUpdate(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &StatusUpdate{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestStatusUpdateRecordProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedStatusUpdateRecord(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &StatusUpdateRecord{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestStatusUpdateRecordMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedStatusUpdateRecord(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &StatusUpdateRecord{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkStatusUpdateRecordProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*StatusUpdateRecord, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedStatusUpdateRecord(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkStatusUpdateRecordProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedStatusUpdateRecord(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &StatusUpdateRecord{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestResourceRequestMessageProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedResourceRequestMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ResourceRequestMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestResourceRequestMessageMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedResourceRequestMessage(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &ResourceRequestMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkResourceRequestMessageProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*ResourceRequestMessage, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedResourceRequestMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkResourceRequestMessageProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedResourceRequestMessage(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &ResourceRequestMessage{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestResourceOffersMessageProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedResourceOffersMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ResourceOffersMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestResourceOffersMessageMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedResourceOffersMessage(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &ResourceOffersMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkResourceOffersMessageProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*ResourceOffersMessage, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedResourceOffersMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkResourceOffersMessageProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedResourceOffersMessage(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &ResourceOffersMessage{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestLaunchTasksMessageProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedLaunchTasksMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &LaunchTasksMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestLaunchTasksMessageMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedLaunchTasksMessage(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &LaunchTasksMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkLaunchTasksMessageProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*LaunchTasksMessage, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedLaunchTasksMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkLaunchTasksMessageProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedLaunchTasksMessage(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &LaunchTasksMessage{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestRescindResourceOfferMessageProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedRescindResourceOfferMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &RescindResourceOfferMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestRescindResourceOfferMessageMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedRescindResourceOfferMessage(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &RescindResourceOfferMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkRescindResourceOfferMessageProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*RescindResourceOfferMessage, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedRescindResourceOfferMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkRescindResourceOfferMessageProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedRescindResourceOfferMessage(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &RescindResourceOfferMessage{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestRunTaskMessageProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedRunTaskMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &RunTaskMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestRunTaskMessageMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedRunTaskMessage(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &RunTaskMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkRunTaskMessageProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*RunTaskMessage, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedRunTaskMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkRunTaskMessageProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedRunTaskMessage(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &RunTaskMessage{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestKillTaskMessageProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedKillTaskMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &KillTaskMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestKillTaskMessageMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedKillTaskMessage(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &KillTaskMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkKillTaskMessageProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*KillTaskMessage, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedKillTaskMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkKillTaskMessageProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedKillTaskMessage(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &KillTaskMessage{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestStatusUpdateMessageProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedStatusUpdateMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &StatusUpdateMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestStatusUpdateMessageMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedStatusUpdateMessage(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &StatusUpdateMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkStatusUpdateMessageProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*StatusUpdateMessage, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedStatusUpdateMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkStatusUpdateMessageProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedStatusUpdateMessage(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &StatusUpdateMessage{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestStatusUpdateAcknowledgementMessageProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedStatusUpdateAcknowledgementMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &StatusUpdateAcknowledgementMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestStatusUpdateAcknowledgementMessageMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedStatusUpdateAcknowledgementMessage(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &StatusUpdateAcknowledgementMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkStatusUpdateAcknowledgementMessageProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*StatusUpdateAcknowledgementMessage, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedStatusUpdateAcknowledgementMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkStatusUpdateAcknowledgementMessageProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedStatusUpdateAcknowledgementMessage(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &StatusUpdateAcknowledgementMessage{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestLostSlaveMessageProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedLostSlaveMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &LostSlaveMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestLostSlaveMessageMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedLostSlaveMessage(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &LostSlaveMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkLostSlaveMessageProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*LostSlaveMessage, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedLostSlaveMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkLostSlaveMessageProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedLostSlaveMessage(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &LostSlaveMessage{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestReconcileTasksMessageProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedReconcileTasksMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ReconcileTasksMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestReconcileTasksMessageMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedReconcileTasksMessage(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &ReconcileTasksMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkReconcileTasksMessageProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*ReconcileTasksMessage, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedReconcileTasksMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkReconcileTasksMessageProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedReconcileTasksMessage(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &ReconcileTasksMessage{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestRegisterSlaveMessageProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedRegisterSlaveMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &RegisterSlaveMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestRegisterSlaveMessageMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedRegisterSlaveMessage(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &RegisterSlaveMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkRegisterSlaveMessageProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*RegisterSlaveMessage, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedRegisterSlaveMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkRegisterSlaveMessageProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedRegisterSlaveMessage(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &RegisterSlaveMessage{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestReregisterSlaveMessageProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedReregisterSlaveMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ReregisterSlaveMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestReregisterSlaveMessageMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedReregisterSlaveMessage(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &ReregisterSlaveMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkReregisterSlaveMessageProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*ReregisterSlaveMessage, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedReregisterSlaveMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkReregisterSlaveMessageProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedReregisterSlaveMessage(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &ReregisterSlaveMessage{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestSlaveRegisteredMessageProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedSlaveRegisteredMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &SlaveRegisteredMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestSlaveRegisteredMessageMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedSlaveRegisteredMessage(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &SlaveRegisteredMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkSlaveRegisteredMessageProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*SlaveRegisteredMessage, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedSlaveRegisteredMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkSlaveRegisteredMessageProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedSlaveRegisteredMessage(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &SlaveRegisteredMessage{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestSlaveReregisteredMessageProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedSlaveReregisteredMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &SlaveReregisteredMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestSlaveReregisteredMessageMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedSlaveReregisteredMessage(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &SlaveReregisteredMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkSlaveReregisteredMessageProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*SlaveReregisteredMessage, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedSlaveReregisteredMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkSlaveReregisteredMessageProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedSlaveReregisteredMessage(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &SlaveReregisteredMessage{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestUnregisterSlaveMessageProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedUnregisterSlaveMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &UnregisterSlaveMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestUnregisterSlaveMessageMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedUnregisterSlaveMessage(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &UnregisterSlaveMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkUnregisterSlaveMessageProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*UnregisterSlaveMessage, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedUnregisterSlaveMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkUnregisterSlaveMessageProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedUnregisterSlaveMessage(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &UnregisterSlaveMessage{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestHeartbeatMessageProto(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedHeartbeatMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto4.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &HeartbeatMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestHeartbeatMessageMarshalTo(t *testing7.T) {
	popr := math_rand7.New(math_rand7.NewSource(time7.Now().UnixNano()))
	p := NewPopulatedHeartbeatMessage(popr, false)
	size := p.Size()
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	_, err := p.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	msg := &HeartbeatMessage{}
	if err := github_com_gogo_protobuf_proto4.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	for i := range data {
		data[i] = byte(popr.Intn(256))
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func BenchmarkHeartbeatMessageProtoMarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	pops := make([]*HeartbeatMessage, 10000)
	for i := 0; i < 10000; i++ {
		pops[i] = NewPopulatedHeartbeatMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(pops[i%10000])
		if err != nil {
			panic(err)
		}
		total += len(data)
	}
	b.SetBytes(int64(total / b.N))
}

func BenchmarkHeartbeatMessageProtoUnmarshal(b *testing7.B) {
	popr := math_rand7.New(math_rand7.NewSource(616))
	total := 0
	datas := make([][]byte, 10000)
	for i := 0; i < 10000; i++ {
		data, err := github_com_gogo_protobuf_proto4.Marshal(NewPopulatedHeartbeatMessage(popr, false))
		if err != nil {
			panic(err)
		}
		datas[i] = data
	}
	msg := &HeartbeatMessage{}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += len(datas[i%10000])
		if err := github_com_gogo_protobuf_proto4.Unmarshal(datas[i%10000], msg); err != nil {
			panic(err)
		}
	}
	b.SetBytes(int64(total / b.N))
}

func TestStatusUpdateJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedStatusUpdate(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &StatusUpdate{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestStatusUpdateRecordJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedStatusUpdateRecord(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &StatusUpdateRecord{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestResourceRequestMessageJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedResourceRequestMessage(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ResourceRequestMessage{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestResourceOffersMessageJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedResourceOffersMessage(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ResourceOffersMessage{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestLaunchTasksMessageJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedLaunchTasksMessage(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &LaunchTasksMessage{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestRescindResourceOfferMessageJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedRescindResourceOfferMessage(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &RescindResourceOfferMessage{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestRunTaskMessageJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedRunTaskMessage(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &RunTaskMessage{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestKillTaskMessageJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedKillTaskMessage(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &KillTaskMessage{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestStatusUpdateMessageJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedStatusUpdateMessage(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &StatusUpdateMessage{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestStatusUpdateAcknowledgementMessageJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedStatusUpdateAcknowledgementMessage(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &StatusUpdateAcknowledgementMessage{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestLostSlaveMessageJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedLostSlaveMessage(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &LostSlaveMessage{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestReconcileTasksMessageJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedReconcileTasksMessage(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ReconcileTasksMessage{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestRegisterSlaveMessageJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedRegisterSlaveMessage(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &RegisterSlaveMessage{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestReregisterSlaveMessageJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedReregisterSlaveMessage(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ReregisterSlaveMessage{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestSlaveRegisteredMessageJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedSlaveRegisteredMessage(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &SlaveRegisteredMessage{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestSlaveReregisteredMessageJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedSlaveReregisteredMessage(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &SlaveReregisteredMessage{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestUnregisterSlaveMessageJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedUnregisterSlaveMessage(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &UnregisterSlaveMessage{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestHeartbeatMessageJSON(t *testing8.T) {
	popr := math_rand8.New(math_rand8.NewSource(time8.Now().UnixNano()))
	p := NewPopulatedHeartbeatMessage(popr, true)
	jsondata, err := encoding_json1.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &HeartbeatMessage{}
	err = encoding_json1.Unmarshal(jsondata, msg)
	if err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Json Equal %#v", msg, p)
	}
}
func TestStatusUpdateProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedStatusUpdate(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &StatusUpdate{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestStatusUpdateProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedStatusUpdate(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &StatusUpdate{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestStatusUpdateRecordProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedStatusUpdateRecord(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &StatusUpdateRecord{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestStatusUpdateRecordProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedStatusUpdateRecord(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &StatusUpdateRecord{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestResourceRequestMessageProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedResourceRequestMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &ResourceRequestMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestResourceRequestMessageProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedResourceRequestMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &ResourceRequestMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestResourceOffersMessageProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedResourceOffersMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &ResourceOffersMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestResourceOffersMessageProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedResourceOffersMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &ResourceOffersMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestLaunchTasksMessageProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedLaunchTasksMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &LaunchTasksMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestLaunchTasksMessageProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedLaunchTasksMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &LaunchTasksMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestRescindResourceOfferMessageProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedRescindResourceOfferMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &RescindResourceOfferMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestRescindResourceOfferMessageProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedRescindResourceOfferMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &RescindResourceOfferMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestRunTaskMessageProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedRunTaskMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &RunTaskMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestRunTaskMessageProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedRunTaskMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &RunTaskMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestKillTaskMessageProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedKillTaskMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &KillTaskMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestKillTaskMessageProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedKillTaskMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &KillTaskMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestStatusUpdateMessageProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedStatusUpdateMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &StatusUpdateMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestStatusUpdateMessageProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedStatusUpdateMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &StatusUpdateMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestStatusUpdateAcknowledgementMessageProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedStatusUpdateAcknowledgementMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &StatusUpdateAcknowledgementMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestStatusUpdateAcknowledgementMessageProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedStatusUpdateAcknowledgementMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &StatusUpdateAcknowledgementMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestLostSlaveMessageProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedLostSlaveMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &LostSlaveMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestLostSlaveMessageProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedLostSlaveMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &LostSlaveMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestReconcileTasksMessageProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedReconcileTasksMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &ReconcileTasksMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestReconcileTasksMessageProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedReconcileTasksMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &ReconcileTasksMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestRegisterSlaveMessageProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedRegisterSlaveMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &RegisterSlaveMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestRegisterSlaveMessageProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedRegisterSlaveMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &RegisterSlaveMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestReregisterSlaveMessageProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedReregisterSlaveMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &ReregisterSlaveMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestReregisterSlaveMessageProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedReregisterSlaveMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &ReregisterSlaveMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestSlaveRegisteredMessageProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedSlaveRegisteredMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &SlaveRegisteredMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestSlaveRegisteredMessageProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedSlaveRegisteredMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &SlaveRegisteredMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestSlaveReregisteredMessageProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedSlaveReregisteredMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &SlaveReregisteredMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestSlaveReregisteredMessageProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedSlaveReregisteredMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &SlaveReregisteredMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestUnregisterSlaveMessageProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedUnregisterSlaveMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &UnregisterSlaveMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestUnregisterSlaveMessageProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedUnregisterSlaveMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &UnregisterSlaveMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestHeartbeatMessageProtoText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedHeartbeatMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.MarshalTextString(p)
	msg := &HeartbeatMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestHeartbeatMessageProtoCompactText(t *testing9.T) {
	popr := math_rand9.New(math_rand9.NewSource(time9.Now().UnixNano()))
	p := NewPopulatedHeartbeatMessage(popr, true)
	data := github_com_gogo_protobuf_proto5.CompactTextString(p)
	msg := &HeartbeatMessage{}
	if err := github_com_gogo_protobuf_proto5.UnmarshalText(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseProto %#v, since %v", msg, p, err)
	}
	if !p.Equal(msg) {
		t.Fatalf("%#v !Proto %#v", msg, p)
	}
}

func TestStatusUpdateStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedStatusUpdate(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestStatusUpdateRecordStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedStatusUpdateRecord(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestResourceRequestMessageStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedResourceRequestMessage(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestResourceOffersMessageStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedResourceOffersMessage(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestLaunchTasksMessageStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedLaunchTasksMessage(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestRescindResourceOfferMessageStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedRescindResourceOfferMessage(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestRunTaskMessageStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedRunTaskMessage(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestKillTaskMessageStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedKillTaskMessage(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestStatusUpdateMessageStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedStatusUpdateMessage(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestStatusUpdateAcknowledgementMessageStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedStatusUpdateAcknowledgementMessage(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestLostSlaveMessageStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedLostSlaveMessage(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestReconcileTasksMessageStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedReconcileTasksMessage(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestRegisterSlaveMessageStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedRegisterSlaveMessage(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestReregisterSlaveMessageStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedReregisterSlaveMessage(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestSlaveRegisteredMessageStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedSlaveRegisteredMessage(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestSlaveReregisteredMessageStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedSlaveReregisteredMessage(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestUnregisterSlaveMessageStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedUnregisterSlaveMessage(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestHeartbeatMessageStringer(t *testing10.T) {
	popr := math_rand10.New(math_rand10.NewSource(time10.Now().UnixNano()))
	p := NewPopulatedHeartbeatMessage(popr, false)
	s1 := p.String()
	s2 := fmt2.Sprintf("%v", p)
	if s1 != s2 {
		t.Fatalf("String want %v got %v", s1, s2)
	}
}
func TestStatusUpdateSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedStatusUpdate(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkStatusUpdateSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*StatusUpdate, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedStatusUpdate(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestStatusUpdateRecordSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedStatusUpdateRecord(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkStatusUpdateRecordSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*StatusUpdateRecord, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedStatusUpdateRecord(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestResourceRequestMessageSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedResourceRequestMessage(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkResourceRequestMessageSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*ResourceRequestMessage, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedResourceRequestMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestResourceOffersMessageSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedResourceOffersMessage(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkResourceOffersMessageSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*ResourceOffersMessage, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedResourceOffersMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestLaunchTasksMessageSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedLaunchTasksMessage(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkLaunchTasksMessageSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*LaunchTasksMessage, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedLaunchTasksMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestRescindResourceOfferMessageSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedRescindResourceOfferMessage(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkRescindResourceOfferMessageSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*RescindResourceOfferMessage, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedRescindResourceOfferMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestRunTaskMessageSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedRunTaskMessage(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkRunTaskMessageSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*RunTaskMessage, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedRunTaskMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestKillTaskMessageSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedKillTaskMessage(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkKillTaskMessageSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*KillTaskMessage, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedKillTaskMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestStatusUpdateMessageSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedStatusUpdateMessage(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkStatusUpdateMessageSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*StatusUpdateMessage, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedStatusUpdateMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestStatusUpdateAcknowledgementMessageSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedStatusUpdateAcknowledgementMessage(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkStatusUpdateAcknowledgementMessageSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*StatusUpdateAcknowledgementMessage, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedStatusUpdateAcknowledgementMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestLostSlaveMessageSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedLostSlaveMessage(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkLostSlaveMessageSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*LostSlaveMessage, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedLostSlaveMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestReconcileTasksMessageSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedReconcileTasksMessage(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkReconcileTasksMessageSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*ReconcileTasksMessage, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedReconcileTasksMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestRegisterSlaveMessageSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedRegisterSlaveMessage(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkRegisterSlaveMessageSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*RegisterSlaveMessage, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedRegisterSlaveMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestReregisterSlaveMessageSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedReregisterSlaveMessage(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkReregisterSlaveMessageSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*ReregisterSlaveMessage, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedReregisterSlaveMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestSlaveRegisteredMessageSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedSlaveRegisteredMessage(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkSlaveRegisteredMessageSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*SlaveRegisteredMessage, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedSlaveRegisteredMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestSlaveReregisteredMessageSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedSlaveReregisteredMessage(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkSlaveReregisteredMessageSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*SlaveReregisteredMessage, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedSlaveReregisteredMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestUnregisterSlaveMessageSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedUnregisterSlaveMessage(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkUnregisterSlaveMessageSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*UnregisterSlaveMessage, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedUnregisterSlaveMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestHeartbeatMessageSize(t *testing11.T) {
	popr := math_rand11.New(math_rand11.NewSource(time11.Now().UnixNano()))
	p := NewPopulatedHeartbeatMessage(popr, true)
	size2 := github_com_gogo_protobuf_proto6.Size(p)
	data, err := github_com_gogo_protobuf_proto6.Marshal(p)
	if err != nil {
		panic(err)
	}
	size := p.Size()
	if len(data) != size {
		t.Fatalf("size %v != marshalled size %v", size, len(data))
	}
	if size2 != size {
		t.Fatalf("size %v != before marshal proto.Size %v", size, size2)
	}
	size3 := github_com_gogo_protobuf_proto6.Size(p)
	if size3 != size {
		t.Fatalf("size %v != after marshal proto.Size %v", size, size3)
	}
}

func BenchmarkHeartbeatMessageSize(b *testing11.B) {
	popr := math_rand11.New(math_rand11.NewSource(616))
	total := 0
	pops := make([]*HeartbeatMessage, 1000)
	for i := 0; i < 1000; i++ {
		pops[i] = NewPopulatedHeartbeatMessage(popr, false)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		total += pops[i%1000].Size()
	}
	b.SetBytes(int64(total / b.N))
}

func TestStatusUpdateGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedStatusUpdate(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestStatusUpdateRecordGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedStatusUpdateRecord(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestResourceRequestMessageGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedResourceRequestMessage(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestResourceOffersMessageGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedResourceOffersMessage(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestLaunchTasksMessageGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedLaunchTasksMessage(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestRescindResourceOfferMessageGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedRescindResourceOfferMessage(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestRunTaskMessageGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedRunTaskMessage(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestKillTaskMessageGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedKillTaskMessage(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestStatusUpdateMessageGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedStatusUpdateMessage(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestStatusUpdateAcknowledgementMessageGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedStatusUpdateAcknowledgementMessage(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestLostSlaveMessageGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedLostSlaveMessage(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestReconcileTasksMessageGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedReconcileTasksMessage(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestRegisterSlaveMessageGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedRegisterSlaveMessage(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestReregisterSlaveMessageGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedReregisterSlaveMessage(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestSlaveRegisteredMessageGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedSlaveRegisteredMessage(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestSlaveReregisteredMessageGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedSlaveReregisteredMessage(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestUnregisterSlaveMessageGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedUnregisterSlaveMessage(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestHeartbeatMessageGoString(t *testing12.T) {
	popr := math_rand12.New(math_rand12.NewSource(time12.Now().UnixNano()))
	p := NewPopulatedHeartbeatMessage(popr, false)
	s1 := p.GoString()
	s2 := fmt3.Sprintf("%#v", p)
	if s1 != s2 {
		t.Fatalf("GoString want %v got %v", s1, s2)
	}
	_, err := go_parser1.ParseExpr(s1)
	if err != nil {
		panic(err)
	}
}
func TestStatusUpdateVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedStatusUpdate(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &StatusUpdate{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestStatusUpdateRecordVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedStatusUpdateRecord(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &StatusUpdateRecord{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestResourceRequestMessageVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedResourceRequestMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ResourceRequestMessage{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestResourceOffersMessageVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedResourceOffersMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ResourceOffersMessage{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestLaunchTasksMessageVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedLaunchTasksMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &LaunchTasksMessage{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestRescindResourceOfferMessageVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedRescindResourceOfferMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &RescindResourceOfferMessage{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestRunTaskMessageVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedRunTaskMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &RunTaskMessage{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestKillTaskMessageVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedKillTaskMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &KillTaskMessage{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestStatusUpdateMessageVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedStatusUpdateMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &StatusUpdateMessage{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestStatusUpdateAcknowledgementMessageVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedStatusUpdateAcknowledgementMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &StatusUpdateAcknowledgementMessage{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestLostSlaveMessageVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedLostSlaveMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &LostSlaveMessage{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestReconcileTasksMessageVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedReconcileTasksMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ReconcileTasksMessage{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestRegisterSlaveMessageVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedRegisterSlaveMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &RegisterSlaveMessage{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestReregisterSlaveMessageVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedReregisterSlaveMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &ReregisterSlaveMessage{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestSlaveRegisteredMessageVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedSlaveRegisteredMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &SlaveRegisteredMessage{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestSlaveReregisteredMessageVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedSlaveReregisteredMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &SlaveReregisteredMessage{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestUnregisterSlaveMessageVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedUnregisterSlaveMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &UnregisterSlaveMessage{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}
func TestHeartbeatMessageVerboseEqual(t *testing13.T) {
	popr := math_rand13.New(math_rand13.NewSource(time13.Now().UnixNano()))
	p := NewPopulatedHeartbeatMessage(popr, false)
	data, err := github_com_gogo_protobuf_proto7.Marshal(p)
	if err != nil {
		panic(err)
	}
	msg := &HeartbeatMessage{}
	if err := github_com_gogo_protobuf_proto7.Unmarshal(data, msg); err != nil {
		panic(err)
	}
	if err := p.VerboseEqual(msg); err != nil {
		t.Fatalf("%#v !VerboseEqual %#v, since %v", msg, p, err)
	}
}

//These tests are generated by github.com/gogo/protobuf/plugin/testgen
